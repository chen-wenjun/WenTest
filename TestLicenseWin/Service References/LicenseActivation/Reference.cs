//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestLicenseWin.LicenseActivation {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://raymark.com/webservices/", ConfigurationName="LicenseActivation.WebActivateLicenseSoap")]
    public interface WebActivateLicenseSoap {
        
        // CODEGEN: Generating message contract since element name serialNumber from namespace http://raymark.com/webservices/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://raymark.com/webservices/GetActivationKey", ReplyAction="*")]
        TestLicenseWin.LicenseActivation.GetActivationKeyResponse GetActivationKey(TestLicenseWin.LicenseActivation.GetActivationKeyRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://raymark.com/webservices/GetActivationKey", ReplyAction="*")]
        System.Threading.Tasks.Task<TestLicenseWin.LicenseActivation.GetActivationKeyResponse> GetActivationKeyAsync(TestLicenseWin.LicenseActivation.GetActivationKeyRequest request);
        
        // CODEGEN: Generating message contract since element name oldSerialNumber from namespace http://raymark.com/webservices/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://raymark.com/webservices/TransferLicense", ReplyAction="*")]
        TestLicenseWin.LicenseActivation.TransferLicenseResponse TransferLicense(TestLicenseWin.LicenseActivation.TransferLicenseRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://raymark.com/webservices/TransferLicense", ReplyAction="*")]
        System.Threading.Tasks.Task<TestLicenseWin.LicenseActivation.TransferLicenseResponse> TransferLicenseAsync(TestLicenseWin.LicenseActivation.TransferLicenseRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://raymark.com/webservices/IsAvailable", ReplyAction="*")]
        bool IsAvailable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://raymark.com/webservices/IsAvailable", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsAvailableAsync();
        
        // CODEGEN: Generating message contract since element name serialNumber from namespace http://raymark.com/webservices/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://raymark.com/webservices/GetExpiryDate", ReplyAction="*")]
        TestLicenseWin.LicenseActivation.GetExpiryDateResponse GetExpiryDate(TestLicenseWin.LicenseActivation.GetExpiryDateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://raymark.com/webservices/GetExpiryDate", ReplyAction="*")]
        System.Threading.Tasks.Task<TestLicenseWin.LicenseActivation.GetExpiryDateResponse> GetExpiryDateAsync(TestLicenseWin.LicenseActivation.GetExpiryDateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://raymark.com/webservices/GetToday", ReplyAction="*")]
        System.DateTime GetToday();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://raymark.com/webservices/GetToday", ReplyAction="*")]
        System.Threading.Tasks.Task<System.DateTime> GetTodayAsync();
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetActivationKeyRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetActivationKey", Namespace="http://raymark.com/webservices/", Order=0)]
        public TestLicenseWin.LicenseActivation.GetActivationKeyRequestBody Body;
        
        public GetActivationKeyRequest() {
        }
        
        public GetActivationKeyRequest(TestLicenseWin.LicenseActivation.GetActivationKeyRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://raymark.com/webservices/")]
    public partial class GetActivationKeyRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string serialNumber;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string activationCode;
        
        public GetActivationKeyRequestBody() {
        }
        
        public GetActivationKeyRequestBody(string serialNumber, string activationCode) {
            this.serialNumber = serialNumber;
            this.activationCode = activationCode;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetActivationKeyResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetActivationKeyResponse", Namespace="http://raymark.com/webservices/", Order=0)]
        public TestLicenseWin.LicenseActivation.GetActivationKeyResponseBody Body;
        
        public GetActivationKeyResponse() {
        }
        
        public GetActivationKeyResponse(TestLicenseWin.LicenseActivation.GetActivationKeyResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://raymark.com/webservices/")]
    public partial class GetActivationKeyResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string GetActivationKeyResult;
        
        public GetActivationKeyResponseBody() {
        }
        
        public GetActivationKeyResponseBody(string GetActivationKeyResult) {
            this.GetActivationKeyResult = GetActivationKeyResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class TransferLicenseRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="TransferLicense", Namespace="http://raymark.com/webservices/", Order=0)]
        public TestLicenseWin.LicenseActivation.TransferLicenseRequestBody Body;
        
        public TransferLicenseRequest() {
        }
        
        public TransferLicenseRequest(TestLicenseWin.LicenseActivation.TransferLicenseRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://raymark.com/webservices/")]
    public partial class TransferLicenseRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string oldSerialNumber;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string oldActivationCode;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string newActivationCode;
        
        public TransferLicenseRequestBody() {
        }
        
        public TransferLicenseRequestBody(string oldSerialNumber, string oldActivationCode, string newActivationCode) {
            this.oldSerialNumber = oldSerialNumber;
            this.oldActivationCode = oldActivationCode;
            this.newActivationCode = newActivationCode;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class TransferLicenseResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="TransferLicenseResponse", Namespace="http://raymark.com/webservices/", Order=0)]
        public TestLicenseWin.LicenseActivation.TransferLicenseResponseBody Body;
        
        public TransferLicenseResponse() {
        }
        
        public TransferLicenseResponse(TestLicenseWin.LicenseActivation.TransferLicenseResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://raymark.com/webservices/")]
    public partial class TransferLicenseResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string TransferLicenseResult;
        
        public TransferLicenseResponseBody() {
        }
        
        public TransferLicenseResponseBody(string TransferLicenseResult) {
            this.TransferLicenseResult = TransferLicenseResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetExpiryDateRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetExpiryDate", Namespace="http://raymark.com/webservices/", Order=0)]
        public TestLicenseWin.LicenseActivation.GetExpiryDateRequestBody Body;
        
        public GetExpiryDateRequest() {
        }
        
        public GetExpiryDateRequest(TestLicenseWin.LicenseActivation.GetExpiryDateRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://raymark.com/webservices/")]
    public partial class GetExpiryDateRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string serialNumber;
        
        public GetExpiryDateRequestBody() {
        }
        
        public GetExpiryDateRequestBody(string serialNumber) {
            this.serialNumber = serialNumber;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetExpiryDateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetExpiryDateResponse", Namespace="http://raymark.com/webservices/", Order=0)]
        public TestLicenseWin.LicenseActivation.GetExpiryDateResponseBody Body;
        
        public GetExpiryDateResponse() {
        }
        
        public GetExpiryDateResponse(TestLicenseWin.LicenseActivation.GetExpiryDateResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://raymark.com/webservices/")]
    public partial class GetExpiryDateResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string GetExpiryDateResult;
        
        public GetExpiryDateResponseBody() {
        }
        
        public GetExpiryDateResponseBody(string GetExpiryDateResult) {
            this.GetExpiryDateResult = GetExpiryDateResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebActivateLicenseSoapChannel : TestLicenseWin.LicenseActivation.WebActivateLicenseSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebActivateLicenseSoapClient : System.ServiceModel.ClientBase<TestLicenseWin.LicenseActivation.WebActivateLicenseSoap>, TestLicenseWin.LicenseActivation.WebActivateLicenseSoap {
        
        public WebActivateLicenseSoapClient() {
        }
        
        public WebActivateLicenseSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebActivateLicenseSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebActivateLicenseSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebActivateLicenseSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TestLicenseWin.LicenseActivation.GetActivationKeyResponse TestLicenseWin.LicenseActivation.WebActivateLicenseSoap.GetActivationKey(TestLicenseWin.LicenseActivation.GetActivationKeyRequest request) {
            return base.Channel.GetActivationKey(request);
        }
        
        public string GetActivationKey(string serialNumber, string activationCode) {
            TestLicenseWin.LicenseActivation.GetActivationKeyRequest inValue = new TestLicenseWin.LicenseActivation.GetActivationKeyRequest();
            inValue.Body = new TestLicenseWin.LicenseActivation.GetActivationKeyRequestBody();
            inValue.Body.serialNumber = serialNumber;
            inValue.Body.activationCode = activationCode;
            TestLicenseWin.LicenseActivation.GetActivationKeyResponse retVal = ((TestLicenseWin.LicenseActivation.WebActivateLicenseSoap)(this)).GetActivationKey(inValue);
            return retVal.Body.GetActivationKeyResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TestLicenseWin.LicenseActivation.GetActivationKeyResponse> TestLicenseWin.LicenseActivation.WebActivateLicenseSoap.GetActivationKeyAsync(TestLicenseWin.LicenseActivation.GetActivationKeyRequest request) {
            return base.Channel.GetActivationKeyAsync(request);
        }
        
        public System.Threading.Tasks.Task<TestLicenseWin.LicenseActivation.GetActivationKeyResponse> GetActivationKeyAsync(string serialNumber, string activationCode) {
            TestLicenseWin.LicenseActivation.GetActivationKeyRequest inValue = new TestLicenseWin.LicenseActivation.GetActivationKeyRequest();
            inValue.Body = new TestLicenseWin.LicenseActivation.GetActivationKeyRequestBody();
            inValue.Body.serialNumber = serialNumber;
            inValue.Body.activationCode = activationCode;
            return ((TestLicenseWin.LicenseActivation.WebActivateLicenseSoap)(this)).GetActivationKeyAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TestLicenseWin.LicenseActivation.TransferLicenseResponse TestLicenseWin.LicenseActivation.WebActivateLicenseSoap.TransferLicense(TestLicenseWin.LicenseActivation.TransferLicenseRequest request) {
            return base.Channel.TransferLicense(request);
        }
        
        public string TransferLicense(string oldSerialNumber, string oldActivationCode, string newActivationCode) {
            TestLicenseWin.LicenseActivation.TransferLicenseRequest inValue = new TestLicenseWin.LicenseActivation.TransferLicenseRequest();
            inValue.Body = new TestLicenseWin.LicenseActivation.TransferLicenseRequestBody();
            inValue.Body.oldSerialNumber = oldSerialNumber;
            inValue.Body.oldActivationCode = oldActivationCode;
            inValue.Body.newActivationCode = newActivationCode;
            TestLicenseWin.LicenseActivation.TransferLicenseResponse retVal = ((TestLicenseWin.LicenseActivation.WebActivateLicenseSoap)(this)).TransferLicense(inValue);
            return retVal.Body.TransferLicenseResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TestLicenseWin.LicenseActivation.TransferLicenseResponse> TestLicenseWin.LicenseActivation.WebActivateLicenseSoap.TransferLicenseAsync(TestLicenseWin.LicenseActivation.TransferLicenseRequest request) {
            return base.Channel.TransferLicenseAsync(request);
        }
        
        public System.Threading.Tasks.Task<TestLicenseWin.LicenseActivation.TransferLicenseResponse> TransferLicenseAsync(string oldSerialNumber, string oldActivationCode, string newActivationCode) {
            TestLicenseWin.LicenseActivation.TransferLicenseRequest inValue = new TestLicenseWin.LicenseActivation.TransferLicenseRequest();
            inValue.Body = new TestLicenseWin.LicenseActivation.TransferLicenseRequestBody();
            inValue.Body.oldSerialNumber = oldSerialNumber;
            inValue.Body.oldActivationCode = oldActivationCode;
            inValue.Body.newActivationCode = newActivationCode;
            return ((TestLicenseWin.LicenseActivation.WebActivateLicenseSoap)(this)).TransferLicenseAsync(inValue);
        }
        
        public bool IsAvailable() {
            return base.Channel.IsAvailable();
        }
        
        public System.Threading.Tasks.Task<bool> IsAvailableAsync() {
            return base.Channel.IsAvailableAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TestLicenseWin.LicenseActivation.GetExpiryDateResponse TestLicenseWin.LicenseActivation.WebActivateLicenseSoap.GetExpiryDate(TestLicenseWin.LicenseActivation.GetExpiryDateRequest request) {
            return base.Channel.GetExpiryDate(request);
        }
        
        public string GetExpiryDate(string serialNumber) {
            TestLicenseWin.LicenseActivation.GetExpiryDateRequest inValue = new TestLicenseWin.LicenseActivation.GetExpiryDateRequest();
            inValue.Body = new TestLicenseWin.LicenseActivation.GetExpiryDateRequestBody();
            inValue.Body.serialNumber = serialNumber;
            TestLicenseWin.LicenseActivation.GetExpiryDateResponse retVal = ((TestLicenseWin.LicenseActivation.WebActivateLicenseSoap)(this)).GetExpiryDate(inValue);
            return retVal.Body.GetExpiryDateResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TestLicenseWin.LicenseActivation.GetExpiryDateResponse> TestLicenseWin.LicenseActivation.WebActivateLicenseSoap.GetExpiryDateAsync(TestLicenseWin.LicenseActivation.GetExpiryDateRequest request) {
            return base.Channel.GetExpiryDateAsync(request);
        }
        
        public System.Threading.Tasks.Task<TestLicenseWin.LicenseActivation.GetExpiryDateResponse> GetExpiryDateAsync(string serialNumber) {
            TestLicenseWin.LicenseActivation.GetExpiryDateRequest inValue = new TestLicenseWin.LicenseActivation.GetExpiryDateRequest();
            inValue.Body = new TestLicenseWin.LicenseActivation.GetExpiryDateRequestBody();
            inValue.Body.serialNumber = serialNumber;
            return ((TestLicenseWin.LicenseActivation.WebActivateLicenseSoap)(this)).GetExpiryDateAsync(inValue);
        }
        
        public System.DateTime GetToday() {
            return base.Channel.GetToday();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetTodayAsync() {
            return base.Channel.GetTodayAsync();
        }
    }
}
